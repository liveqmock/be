package com.brightedu.dao.edu;

import com.brightedu.model.edu.User;
import com.brightedu.model.edu.UserExample;
import java.util.List;
import org.apache.ibatis.annotations.Delete;
import org.apache.ibatis.annotations.Insert;
import org.apache.ibatis.annotations.Param;
import org.apache.ibatis.annotations.ResultMap;
import org.apache.ibatis.annotations.Select;
import org.apache.ibatis.annotations.Update;

public interface UserMapper {

	/**
	 * This method was generated by MyBatis Generator. This method corresponds to the database table edu.user_admin
	 * @mbggenerated  Thu Feb 09 18:41:46 CST 2012
	 */
	int countByExample(UserExample example);

	/**
	 * This method was generated by MyBatis Generator. This method corresponds to the database table edu.user_admin
	 * @mbggenerated  Thu Feb 09 18:41:46 CST 2012
	 */
	int deleteByExample(UserExample example);

	/**
	 * This method was generated by MyBatis Generator. This method corresponds to the database table edu.user_admin
	 * @mbggenerated  Thu Feb 09 18:41:46 CST 2012
	 */
	@Delete({ "delete from edu.user_admin",
			"where user_id = #{user_id,jdbcType=NUMERIC}" })
	int deleteByPrimaryKey(Integer user_id);

	/**
	 * This method was generated by MyBatis Generator. This method corresponds to the database table edu.user_admin
	 * @mbggenerated  Thu Feb 09 18:41:46 CST 2012
	 */
	@Insert({
			"insert into edu.user_admin (user_id, user_name, ",
			"user_password, user_type_id, ",
			"user_status, agent_id, ",
			"register_date, update_date)",
			"values (#{user_id,jdbcType=NUMERIC}, #{user_name,jdbcType=VARCHAR}, ",
			"#{user_password,jdbcType=VARCHAR}, #{user_type_id,jdbcType=NUMERIC}, ",
			"#{user_status,jdbcType=BIT}, #{agent_id,jdbcType=NUMERIC}, ",
			"#{register_date,jdbcType=TIMESTAMP}, #{update_date,jdbcType=TIMESTAMP})" })
	int insert(User record);

	/**
	 * This method was generated by MyBatis Generator. This method corresponds to the database table edu.user_admin
	 * @mbggenerated  Thu Feb 09 18:41:46 CST 2012
	 */
	int insertSelective(User record);

	/**
	 * This method was generated by MyBatis Generator. This method corresponds to the database table edu.user_admin
	 * @mbggenerated  Thu Feb 09 18:41:46 CST 2012
	 */
	List<User> selectByExample(UserExample example);

	/**
	 * This method was generated by MyBatis Generator. This method corresponds to the database table edu.user_admin
	 * @mbggenerated  Thu Feb 09 18:41:46 CST 2012
	 */
	@Select({
			"select",
			"user_id, user_name, user_password, user_type_id, user_status, agent_id, register_date, ",
			"update_date", "from edu.user_admin",
			"where user_id = #{user_id,jdbcType=NUMERIC}" })
	@ResultMap("BaseResultMap")
	User selectByPrimaryKey(Integer user_id);

	/**
	 * This method was generated by MyBatis Generator. This method corresponds to the database table edu.user_admin
	 * @mbggenerated  Thu Feb 09 18:41:46 CST 2012
	 */
	int updateByExampleSelective(@Param("record") User record,
			@Param("example") UserExample example);

	/**
	 * This method was generated by MyBatis Generator. This method corresponds to the database table edu.user_admin
	 * @mbggenerated  Thu Feb 09 18:41:46 CST 2012
	 */
	int updateByExample(@Param("record") User record,
			@Param("example") UserExample example);

	/**
	 * This method was generated by MyBatis Generator. This method corresponds to the database table edu.user_admin
	 * @mbggenerated  Thu Feb 09 18:41:46 CST 2012
	 */
	int updateByPrimaryKeySelective(User record);

	/**
	 * This method was generated by MyBatis Generator. This method corresponds to the database table edu.user_admin
	 * @mbggenerated  Thu Feb 09 18:41:46 CST 2012
	 */
	@Update({ "update edu.user_admin",
			"set user_name = #{user_name,jdbcType=VARCHAR},",
			"user_password = #{user_password,jdbcType=VARCHAR},",
			"user_type_id = #{user_type_id,jdbcType=NUMERIC},",
			"user_status = #{user_status,jdbcType=BIT},",
			"agent_id = #{agent_id,jdbcType=NUMERIC},",
			"register_date = #{register_date,jdbcType=TIMESTAMP},",
			"update_date = #{update_date,jdbcType=TIMESTAMP}",
			"where user_id = #{user_id,jdbcType=NUMERIC}" })
	int updateByPrimaryKey(User record);
}